/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 Main sass file

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*

 Rules for working with this css (sass) architecture
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 - Follow ITCSS css architecture: https://www.youtube.com/watch?v=1OKZOV-iLj4

 - Only apply margin to left and bottom of elements for consistent and 
   behaviour when moving page elements.
 
 - Use BEM syntax for class naming conventions
   http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/

 - Add styles in alphabetical order (e.g. background, border, color, font)

 - Add media queries on a per style block basis (i.e. not in a separate file)

*/
/*

 1. Settings
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.breakpoints

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Set an easy access breakpoint for mobile navigation
 - - - - - - 

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.buttons

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 NOTE:
 - - - - - -

 By default buttons are set with a height so they can be aligned with elements like form inputs.
 Button height can be set to false to just use padding.
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.color

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Scaffold color classes
 - - - - - -

 NOTE:

 This gernerates a series of color classes defined in trumps.color
 
*/
/* 

 NOTE:
 - - - - - -

 quotes around colors as sass can get confused with browser color defaults.
 Sass map is used for auto-generating color classes.
 
*/
/* 

 Give site colors an easy access handle
 - - - - - - 

*/
/* 

 Easy access reference handles
 - - - - - - 

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.container

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
 
 Set a max-width for the default container
 - - - - - -

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.breakpoints

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Set an easy access breakpoint for mobile navigation
 - - - - - - 

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.forms

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.grid

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.icons

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 NOTE:
 - - - - - -

 - svg sprite generated using gulp with https://github.com/jkphl/gulp-svg-sprite

 - icons are controlled by height (rather than width) to allow for equal horizontal spacing.
 
*/
/* 

 Specify icon sizes
 - - - - - - 

*/
/* 

 Specify ratios for irregular width icons (height / width) - or maybe (width / height ??)
 - - - - - - 

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.media

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.ratios

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
	
 NOTE:
 - - - - - -

 Taken from https://github.com/modularscale/modularscale-sass	

*/
/* Golden ratio */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.spacing

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 NOTE:
 - - - - - -

 0 is listed last so it can overide other settings
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 settings.typography

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Import fonts from external services
 - - - - - -
 
*/
@import url(https://fonts.googleapis.com/css?family=Karla:400,700,400italic);
/* 

 NOTE:
 - - - - - -

 This sets the unit used for generated type sizes in _tols.typography.scss
 
*/
/* 

 NOTE:
 - - - - - -

 This sets base type sizes for the body element, list format `(font-size, line-height)`
 
 - These are also used in em() function in generate_breakpoint_type_sizes()
 
 - If other elements (headings etc.) are defined in ems, they will resize
   proprtionally based on these values.
 
*/
/* 

 A ratio for using in conjunction woth type_scale() function
 - - - - - -
 
*/
/* 

 Typefaces
 - - - - - -
 
*/
/* 

 Weights
 - - - - - - 

*/
/*

 2. Tools
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Units first as used in other tools */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.units

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 POW - http://www.sassmeister.com/gist/10620fefd1ed75189f1b
 - - - - - -
 
*/
/* 

 Convert PX to EM
 - - - - - -
 
*/
/* 

 Convert PX to REM
 - - - - - -
 
*/
/* 

 Convert PX to %
 - - - - - -
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.breakpoints

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Get breakpoint from default $breakpoint sass map
 - - - - - -
 
*/
/* 

 Generate breakpoint media query css
 - - - - - -
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.buttons

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Setup base styles for a button
 - - - - - -
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.clearfix

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.grid

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
 
 Display fallback styles for no flexbox support if `support-legacy` is set
 to `true` in grid.settings
 - - - - - - 

*/
/*
 
 Generate styles for grid wrapper
 - - - - - - 

*/
/*
 
 Generate a single column class based on number of columns to span
 - - - - - - 

 $span: number of grid columns to span
 $tg-total-cols: total number of columns in grid
 $stop-flex: define whether to specify flex css property (only needed once per
 class across breakpoints)

*/
/*
 
 Scaffold a responsive grid column with classname based on number of
 columns to span and a breakpoint sass map
 - - - - - - 

 $span: number of grid columns to span
 $tg-total-cols: total number of columns in grid
 $map: a sass map of breakpoints in the format `(name: unit)`
 $class: a prefix string for generating the class names

*/
/*
 
 Generates breakpoints and values for a responsive grid column
 based on number of columns to span and breakpoint sass map.
 Gives slightly more granular control in class building than
 @scaffold_breakpoint_col()
 - - - - - - 

 $class: css class name
 $span: number of grid columns to span
 $tg-total-cols: total number of columns in grid
 $map: a sass map of breakpoints in the format `(name: unit)`

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.media

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Generate aspect ratio as a percentage
 - - - - - -
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.placeholders

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*

 Generate custom styles for placeholders
 - - - - - -

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.pseudo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Create pseudo blocks
 - - - - - -
 
*/
/* 

 css arrows
 - - - - - -
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.spacing

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Scaffold a set of spacing classes
 - - - - - -
 
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 tools.typography

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Return a scale value based on ratio
 - - - - - -

 This is a very basic implementation of typographic scale. $ratio is in the
 format 1.5 for perfect fifth. $int refers to progression up the scale
 
*/
/* 

 Generate base font sizes
 - - - - - -

 NOTE:

 Generate body font-sizes from `$breakpoints` and `$breakpoint_base_type_sizes` sass maps.
 Update font-size on body to affect all relatively sized or unsized child elements.
 
*/
/* 

 Generate line-height ratios for breakpoints
 - - - - - -
 
*/
/* 

 Generate type sizes for different breakpoints
 - - - - - -

 NOTE:

 By default we use ems for sizing so type can scale proportionally with page zoom.
 If we don't set an overide at each breakpoint, font-sizes will scale proportional
 to the base font-size set on the body. If this isn't desired behaviour then update
 this unit to rem or px.
 
*/
/*

 3. Generic
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 generic.boxsizing

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
* {
  /* Set all elements to use border-box */
  box-sizing: border-box;
}

/*

 4. Base
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 base.forms

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
form {
  width: 100%;
}

fieldset {
  padding: 0;
  margin: 0;
  border: none;
}

input[type="text"], input[type="email"], input[type="tel"],
input[type="number"], input[type="date"], input[type="url"],
input[type="password"], input[type="search"], textarea {
  /* 

	 NOTE:
	 - - - - - -

	 Uses height to help alignment with other elements
	 Height can be set to false

	*/
  height: 50px;
  padding: 0 14px;
  background: #fff;
  border: none;
  /* Remove rounded corners in ios */
  -webkit-appearance: none;
  border-radius: initial;
}

input[type="radio"], input[type="checkbox"] {
  vertical-align: middle;
  margin-top: -4px;
}

textarea {
  height: auto;
  padding: 14px;
  resize: vertical;
}

button, input[type="submit"], input[type="reset"] {
  height: 50px;
  padding: 0 36px;
  /* Remove rounded corners in ios */
  -webkit-appearance: none;
  border: none;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 base.headings

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 NOTE:
 - - - - - -

 - Type size / line-height can be set for each element at different breakpoints
   using the breakpoint_type_sizes() mixin.

 - The mixin takes a sass map argument with nested lists for line-height and
   font-size in the format (breakpoint: (font-size, line-height)) eg:
   
   @include breakpoint_type_sizes((s: (39.056, 58.5), l: (43.938, 65.9)))

 - alternatively generate values using the type_scale() function
 
*/
h1, .heading-1 {
  font-size: 3.16049em;
}

h2, .heading-2 {
  font-size: 2.37037em;
}

h3, .heading-3 {
  font-size: 1.77778em;
}

h4, .heading-4 {
  font-size: 1.33333em;
}

h5, .heading-5 {
  font-size: 1em;
}

h6, .heading-6 {
  font-size: 1em;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 base.links

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
a {
  color: #2f7de5;
  text-decoration: none;
}

a:hover {
  color: #1f7bf5;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 base.media

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
img {
  max-width: 100%;
}

img, video {
  vertical-align: middle;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 base.page

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 NOTE:
 - - - - - -

 - We are assuming browser's base font size is always 16px on html

 - generate_base_font_sizes() can take optional unit argument to overide
   default setting of `em`.
 
*/
body {
  /* 

     NOTE:
     - - - - - -

     This generates font size and line-height for each breakpoint
     specified in _settings.typography.scss
     
    */
  font-size: 0.9375em;
  line-height: 1.6;
  font-family: "Karla", sans-serif;
}

@media (min-width: 600px) {
  body {
    font-size: 1.125em;
    line-height: 1.5;
  }
}

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid;
  margin: 10px 0;
  padding: 0;
}

p {
  text-rendering: optimizeLegibility;
}

strong {
  font-weight: 700;
}

blockquote, figure {
  margin-left: 0;
  margin-right: 0;
}

/* 

 NOTE:
 - - - - - -

 Here we are setting a default bottom margin for block level elements
 on each breakpoint, based on base font-size / line-height settings
 set in _settings.typography.scss
 
*/
h1, h2, h3, h4, h5, h6, ul, ol, dd, p, figure, pre, table,
fieldset, hr, blockquote {
  margin-top: 0;
  margin-bottom: 1.5rem;
}

@media (min-width: 600px) {
  h1, h2, h3, h4, h5, h6, ul, ol, dd, p, figure, pre, table,
  fieldset, hr, blockquote {
    margin-bottom: 1.6875rem;
  }
}

/*

 5. Objects
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 objects.container

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
.container {
  margin: 0 auto;
  max-width: 1020px;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 objects.grid

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* Grid container */
.grid {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.no-flexbox .grid {
  display: table;
  table-layout: fixed;
  width: 100%;
}

@media (min-width: 600px) {
  .grid-m {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }
  .no-flexbox .grid-m {
    display: table;
    table-layout: fixed;
    width: 100%;
  }
}

@media (min-width: 900px) {
  .grid-l {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }
  .no-flexbox .grid-l {
    display: table;
    table-layout: fixed;
    width: 100%;
  }
}

/* Allow grid cells to wrap */
.grid--wrap {
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}

.no-flexbox .grid--wrap {
  zoom: 1;
}

.no-flexbox .grid--wrap:before, .no-flexbox .grid--wrap:after {
  content: "";
  display: table;
}

.no-flexbox .grid--wrap:after {
  clear: both;
}

.no-flexbox .grid--wrap > * {
  float: left;
}

/* Basic column */
.col {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.no-flexbox .col {
  display: table-cell;
  vertical-align: top;
}

/* 
 
 Generate column span classes across breakpoints
- - - - - -

 We only generate these classes as required to cut down on unnecessary css.
 Default classes are in the format `.col-{breakpoint}--{span}of{}total`
 e.g. `.col-m--4of6`. A breakpoint set to 0 requires no breakpoint prefix. 

*/
/* Loop through each breakpoint in settings.breakpoints */
/* Mobile first: don't write media query if value is 0 */
.col--4of6 {
  -webkit-box-flex: 0 !important;
      -ms-flex: none !important;
          flex: none !important;
  /* Fixes images breaking container in FF Developer Edition */
  min-width: 0;
  width: 66.66667% !important;
}

/* Write css media query */
/* Mobile first: don't write media query if value is 0 */
@media (min-width: 600px) {
  .col-m--4of6 {
    width: 66.66667% !important;
  }
}

/* Mobile first: don't write media query if value is 0 */
@media (min-width: 900px) {
  .col-l--4of6 {
    width: 66.66667% !important;
  }
}

/* Loop through each breakpoint in settings.breakpoints */
/* Mobile first: don't write media query if value is 0 */
@media (min-width: 600px) {
  .third {
    -webkit-box-flex: 0 !important;
        -ms-flex: none !important;
            flex: none !important;
    /* Fixes images breaking container in FF Developer Edition */
    min-width: 0;
    width: 33.33333% !important;
  }
}

/* Add gutters */
.gutter {
  padding-left: 0.625rem;
  padding-right: 0.625rem;
}

/* Test content */
.test {
  background: #eee;
  height: 100px;
}

.col:nth-child(even) .test {
  background: #ccc;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 objects.lists

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 objects.media

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Create media placeholders
 - - - - - -

*/
/*

 6. Components
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.branding

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.buttons

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
.button {
  display: inline-block;
  /* 

   NOTE:
   - - - - - -

   Uses height so can be aligned with elements like form inputs
   Height can be set to false to just use padding
   
  */
  height: 50px;
  padding: 0 36px;
  line-height: 50px;
  text-align: center;
  text-decoration: none;
}

.button--primary {
  background: #2f7de5;
  color: #fff;
}

.button--primary:hover {
  background: #187afc;
  color: #fff;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.custom-select

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.forms

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*

 Generate custom placeholder styles
- - - - - -

*/
/*

 Form groups and rows
- - - - - -

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.media

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.page-header

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.sections

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.site-footer

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.site-nav

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.top-bar

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 components.validation

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*

 7. Trumps
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.alignment

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
.center {
  display: block;
  margin-left: auto !important;
  margin-right: auto !important;
}

.cf {
  zoom: 1;
}

.cf:before, .cf:after {
  content: "";
  display: table;
}

.cf:after {
  clear: both;
}

.left {
  float: left !important;
}

[dir="rtl"] .left {
  float: right !important;
}

.right {
  float: right !important;
}

[dir="rtl"] .right {
  float: left !important;
}

@media (min-width: 600px) {
  .left-m {
    float: left !important;
  }
  [dir="rtl"] .left-m {
    float: right !important;
  }
}

@media (min-width: 600px) {
  .right-m {
    float: right !important;
  }
  [dir="rtl"] .right-m {
    float: left !important;
  }
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.color

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
 
 Create helper classes for each color
 - - - - - -

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.headings

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.icons

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* Set default fill for all icons */
[class*="icon-"] {
  fill: currentColor;
}

/* Create icon classes */
.icon-close-32 {
  height: 32px;
  width: 32px;
}

.icon-facebook-32 {
  height: 32px;
  width: 23px;
}

.icon-google-plus-32 {
  height: 32px;
  width: 41px;
}

.icon-instagram-32 {
  height: 32px;
  width: 32px;
}

.icon-playback-32 {
  height: 32px;
  width: 48.32px;
}

.icon-twitter-32 {
  height: 32px;
  width: 36px;
}

.icon-open-quote-32 {
  height: 32px;
  width: 41.6px;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.links

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.media

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.spacing

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* 

 Create a standard spacing class
 - - - - - -

 This follows line-height from $base-type-sizes in settings.typography

*/
.v-space {
  margin-bottom: 1.5rem;
}

@media (min-width: 600px) {
  .v-space {
    margin-bottom: 1.6875rem;
  }
}

.v-space--double {
  margin-bottom: 3rem;
}

@media (min-width: 600px) {
  .v-space--double {
    margin-bottom: 3.375rem;
  }
}

.v-space-children > * {
  margin-bottom: 1.5rem;
}

@media (min-width: 600px) {
  .v-space-children > * {
    margin-bottom: 1.6875rem;
  }
}

.v-space-children > *:last-child {
  margin-bottom: 0 !important;
}

/* 

 Create breakpoint spacing classes
 - - - - - -

*/
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.text

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
.text-small {
  font-size: 0.75rem !important;
}

.text-center {
  text-align: center !important;
}

.text-light {
  font-weight: 300 !important;
}

.text-primary {
  color: #2f7de5 !important;
}

.text-default {
  color: #000 !important;
}

.text-invert {
  color: #fff !important;
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.visibility

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* Basic visibility classes */
.hidden {
  display: none !important;
}

.visible {
  display: block;
}

.visible-f {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.visible-i {
  display: inline;
}

.visible-ib {
  display: inline-block;
}

/* Accesibility visibility classes */
.hidden-v {
  position: absolute;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

[dir="ltr"] .hidden-v {
  left: -10000px;
}

[dir="rtl"] .hidden-v {
  right: -10000px;
}

/* Generate default breakpoint visibility classes */
.visible-m,
.visible-m-i,
.visible-m-ib,
.visible-m-f {
  display: none;
}

@media (min-width: 600px) {
  .visible-m {
    display: block;
  }
  .visible-m-i {
    display: inline;
  }
  .visible-m-ib {
    display: inline-block;
  }
  .visible-m-f {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }
}

@media (min-width: 600px) {
  .hidden-m {
    display: none !important;
  }
}

.visible-l,
.visible-l-i,
.visible-l-ib,
.visible-l-f {
  display: none;
}

@media (min-width: 900px) {
  .visible-l {
    display: block;
  }
  .visible-l-i {
    display: inline;
  }
  .visible-l-ib {
    display: inline-block;
  }
  .visible-l-f {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }
}

@media (min-width: 900px) {
  .hidden-l {
    display: none !important;
  }
}

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 trumps.webfonts

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
/* Font loading classes */

/*# sourceMappingURL=data:application/json;base64, */
